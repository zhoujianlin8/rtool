#!/usr/bin/env node
var program = require('ginit').commander;
var rtool = require('../index');
var util = require('util');
var packageJSON = require(__dirname+'/../package.json');
var helpInfo = {
  '--root': ['项目目录，如果指定的不是项目目录，将从此目录向上寻找最近的项目目录。', 'Project directory.'],
  'init': ['初始化项目目录。', 'Init project directory'],
  'r':['创建router\n 使用方法:\n `rtool router <router名称> [类型]','router'],
  'p':['创建页面\n 使用方法:\n `rtool page <page名称> [类型]'],
  'c': ['创建component\n 使用方法:\n `rtool component <component名称>', 'component related'],
  'data': ['创建data\n 使用方法:\n `rtool data <data名称> [数据类型]`', 'data related'],
  'build': ['构建项目。', 'Build Project.'],
  'task': ['执行gulp task 任务。', 'gulp task'],
  'start': ['启动项目调试服务器', 'Start up project debug server.'],
  '--port': ['调试服务启动的端口，默认是9000。', 'debug server port,deault is 9000'],
  '--buildTo': ['打包到文件，默认是build。', 'buildTo']
};

var lang = process.env.LANG || 'zh';
lang = (lang.indexOf('zh') === 0) ? 0 : 1;
program
  .version(packageJSON.version)
  .option('-p, --port <port>', helpInfo['--port'][lang])
  .option('-b, --buildTo <buildTo>', helpInfo['--buildTo'][lang]);
program
  .command('init [template]')
  .description(helpInfo['init'][lang])
  .action(function (template) {
    rtool.init(template);
  });
/*program
  .command('install [moduleName]')
  .description(helpInfo['install'][lang])
  .action(function (moduleName) {
    rtool.install(moduleName);
  });*/

program
  .command('c <name> [routeName]')
  .description(helpInfo['c'][lang])
  .action(function (name,route) {
    rtool.addComponent(name,route);
  });

program
  .command('r <name> [type]')
  .description(helpInfo['r'][lang])
  .action(function (name, type) {
    rtool.addRoute(name,type);
  });
program
  .command('p <name> [type]')
  .description(helpInfo['r'][lang])
  .action(function (name, type) {
    rtool.addPage(name,type);
  });
program
  .command('data <name> [type]')
  .description(helpInfo['data'][lang])
  .action(function (name, type) {
    rtool.addData(name,type);
  });
program
  .command('build')
  .description(helpInfo['build'][lang])
  .action(function () {
    rtool.tasks({
      tasks: 'build',
      buildTo: program.buildTo,
      args: getArgs(this.parent.args)
    });
    // process.exit(0);
  });

program
  .command('task')
  .description(helpInfo['task'][lang])
  .action(function () {
    var args = getArgs(this.parent.args);
    rtool.tasks({
      tasks: args[0],
      buildTo: program.buildTo,
      args: arr.slice(1)
    });
  });

program
  .command('start ')
  .description(helpInfo['start'][lang])
  .action(function () {
    var args = getArgs(this.parent.args);
    var type = args[0];
    rtool.start({
      port: program.port,
      isWeinre: type === 'weinre' ||  type === 'wp',
      isProxy: type === 'proxy' ||  type === 'wp',
      args: args
    });
  });
/*
program
  .command('ut <template>')
  .description(helpInfo['ut'][lang])
  .action(function (template) {
    rtool.updateTemplate(template);
  });
*/
program
  .command('*')
  .description('deploy the given env')
  .action(function (env) {
    console.log('env',env)
  });
program.parse(process.argv);

function getArgs(arr) {

  var newArr = [];
  arr = arr || [];
  arr.pop();
  arr.forEach(function (item) {
     item && newArr.push(item)
  });
  return newArr;
}
//执行验证
//updateCheck(packageJSON);